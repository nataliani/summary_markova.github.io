<div id="jQuary">
    <h1>Работа с библиотекой jQuary</h1>
    <h2>Эффекты jQuary</h2>
    <ul class="listen">
        <li>Метод hide c заданной скоростью скрывает  выбранный элемент
            <span class="code">$(селектор).hide(скорость,функция_обратного_вызова)</span>
            <ul>
                <li> селектор выбирает элемент, который будет скрыт.</li>
                <li>скорость указывает скорость скрытия элемента. Скорость задается в миллисекундах (1000 миллисекунд = 1 секунда) или с помощью одного из предопределенных свойств: fast, slow, normal (быстро, медленно, нормально).</li>
                <li> функция_обратного_вызова (необязательный параметр) Функция, которая будет вызвана, когда элемент будет полностью скрыт.</li>
            </ul>
        </li> 
        <li>Метод fadeIn с заданной скоростью изменяет прозрачность выбранного элемента постепенно делая его видимым.
            <span class="code">$(селектор).fadeIn(скорость,функция_обратного_вызова)</span>
            <ul>
                <li>селектор выбирает элемент, который будет отображен.</li>
                <li>скорость указывает скорость изменения прозрачности элемента. Скорость задается в миллисекундах (1000 миллисекунд = 1 секунда) или с помощью одного из предопределенных свойств: fast, slow, normal (быстро, медленно, нормально).</li>
                <li>функция_обратного_вызова (необязательный параметр) Функция, которая будет вызвана, когда элемент будет полностью отображен.</li>
            </ul>
        </li>
        <li>Метод fadeOut с заданной скоростью изменяет прозрачность выбранного элемента постепенно делая его невидимым.
            <span class="code">$(селектор).fadeOut(скорость,функция_обратного_вызова)</span>
            <ul>
                <li>селектор выбирает элемент, который будет скрыт.</li>
                <li>скорость указывает скорость изменения прозрачности элемента. Скорость задается в миллисекундах (1000 миллисекунд = 1 секунда) или с помощью одного из предопределенных свойств: fast, slow, normal (быстро, медленно, нормально).</li>
                <li>функция_обратного_вызова (необязательный параметр) Функция, которая будет вызвана, когда элемент будет полностью скрыт.</li>
            </ul>
        </li>
        <li>Метод fadeTo с заданной скоростью изменяет прозрачность элемента до указанного значения.
            <span class="code">$(селектор).fadeTo(скорость,прозрачность,функция_обратного_вызова)</span>
            <ul>
                <li>селектор выбирает элемент, прозрачность которого будет изменяться.</li>
                <li>скорость указывает скорость изменения прозрачности элемента. Скорость задается в миллисекундах (1000 миллисекунд = 1 секунда) или с помощью одного из предопределенных свойств: fast, slow, normal (быстро, медленно, нормально).</li>
                <li>прозрачность указывает значение прозрачности. Должно быть в пределах от 0.0 (полностью прозрачный элемент) до 1.0 (полностью непрозрачный элемент).</li>
                <li>функция_обратного_вызова (необязательный параметр) Функция, которая будет вызвана, когда прозрачность элемента будет полностью изменена.</li>
            </ul>
        </li>
    </ul>
</div>
<div id="bash">
	<h1>Основные команды оболочки BASH</h1>
	<h2>Работа с файлами</h2>
	<ul>
		<li>Копирование файлов 
			<span class="code">cp <em>адрес/имя_оригинала</em> <em>адрес/имя_копии</em>
			</span> для копирования каталога 
			<span class="code">cp -r <em>адрес_оригинала</em> <em>адрес_копии</em>
			</span>
            <ul>
                <li>-p Сохраняет время модификации файла и максимально возможные полномочия. Без этой опции для нового файла задаются полномочия, соответствующие полномочиям запустившего команду пользователя</li>
                <li>-R или -r Если source — каталог, то копируется как он, так и все входящие в него подкаталоги, т. е. сохраняется исходная форма дерева каталогов</li>
                <li>-d Если задать эту опцию, то символические ссылки будут оставаться ссылками (а иначе вместо ссылки копируется файл, на который дается ссылка)</li>
                <li>-f Перезаписывать файлы при копировании (если такие уже есть) без дополнительных предупреждений</li>
            </ul>
		</li>
        <li>Cоздать подкаталог в текущем каталоге  
            <span class="code">mkdir <em>/home/kos/book/glava5/part1</em></span>
            <ul>
                <li>-m mode — задает режим доступа для нового каталога (например, -m 755);</li>
                <li>-p — создавать указанные промежуточные каталоги (если они не существуют).</li>
            </ul>
        </li>
        <li>Команда cat часто используется для создания файлов (хотя можно воспользоваться и командой touch). По команде cat на стандартный вывод (т. е. на экран) выводится содержимое указанного файла (или нескольких файлов, если их имена последовательно задать в качестве аргументов команды). Если вывод команды cat перенаправить в файл, то можно получить копию какого-то файла 
            <span class="code">cat file1 > file2</span>
        </li>
		<li>Просмотр и редактирование файлов с помощью редактора vi 
			<span class="code">vi <em>адрес/имя файла</em></span>
		</li>
    </ul>
</div>
<div id="git"> 
            <h1> Шпаргалка по использованию Git!</h1>
            <hr>
            <h2>Основной базовый цикл:</h2>
            <ol>
                <li>Сделать\внести изменения;</li>
                <li>Добавить изменения (в буфер);</li>
                <li>Закоммитить изменения с сообщением в репозиторий</li>
            </ol>
            <h2>Рекомендуемые правила составления сообщений для коммита:</h2>
            <ol>
                <li>Краткое однострочное сообщение (менее 50 символов);</li>
                <li>Опционально может последовать пустая строка, затем более подробное описание;</li>
                <li>Для больших описаний каждая отдельная строка должна быть менее 72 символов;</li>
                <li>Сообщение для коммита писать в настоящем времени, не в прошедшем, маркируете этим, что делает коммит, а не что сделали вы как создатель:
                    - "Фиксит баг" , не "Пофиксил баг";</li>
                <li>Если нужен список, можно использовать звездочки или дефисы;</li>
                <li>Можно использовать номера багов, номера тикетов или номера запросов;</li>
                <li>Можно в квадратных скобках указать сокращения используемые в вашей организации:</li>
                    <ul>
                        <li>"[css, js]"</li>
                        <li>"bugfix: "</li>
                        <li>""#38405"</li>
                    </ul>
                <li>Писать четкие и содержательные сообщения:<br>
                    - Плохо: "Исправить опечатку"<br>
                    - Хорошо: "Добавить отсутствующий тег > в разделе проекта HTML"<br>
                    - Плохо: "Обновить код логина"<br>
                    - Хорошо: "Изменить пользовательскую аутентификацию на Blowfish"<br>
                    - Плохо: "Обновляет отчет о членстве, на следующей неделе мы обсудим, правильно ли это"(включает другие комментарии, которые не касаются самого коммита)</li>
            </ol>
            <h2>Для успешного начала работы необходимо выполнить ряд действий:</h2>
                <ol>
                    <li>Необходимо установить Git;</li>
                    <li>Необходимо произвести первые настройки, а именно:</li>
                        <ul>
                            <li>установить имя пользователя <span class="code"> git config user.name <em>sername</em></span></li>
                            <li>установить email adress пользователя <span class="code">git config user.email <em>email@example.com</em></span></li>
                        </ul>
                    <li>Создание репозитория:
                        <ul>
                            <li>переходим в необходимою директорию <span class="code">cd <em>/путь к директории</em></span></li>
                            <li>говорим git отслеживать изменения в данной директории <span class="code">git init</span></li>
                        </ul>
                    </li>
                    <li>Добавить в репозиторий все имеющиеся в директории файлы <span class="code">git add . </span></li>
                    <li>Проверить статус изменений <span class="code">git status </span></li>
                    <li>Сделать первый коммит <span class="code">git commit -m "comment"</span></li>
                </ol>
            <h2>Возможность просматривать логи коммитов:</h2>
            <ul>
                <li>Просмотреть все логи <span class="code">git log</span></li>
                <li>Показать последние n изменений <span class="code">git log -n 1</span></li>
                <li>Показать количество коммитов до данной дыты <span class="code">git log --until=2012-06-15</span></li>
                <li>Показать лог с коммитами от автора с именем Kevin (часть имени) <span class="code">git log - -author="Kevin"</span></li>
                <li>Поиск коммита с использованием шаблона регулярного выражения <span class="code">git log --grep="Init"</span></li>
                <li>Сравнить файлы, находящиеся в рабочей директории и репозитории <span class="code">git diff</span></li>
                <li>Просмотреть изменения произведенные в конкретном файле <span class="code">git diff <em>name.fail</em></span></li>
                <li>Сравнить файлы, находящиеся в буфере и репозитории <span class="code">git diff --staged</span></li>
            </ul>
             <h2>Отмена изменений</h2>
            <ul> 
                <li>Вернуть файл из репозитория в рабочую директорию при этом (--) остаться в той же ветке (бранче) <span class="code">git checkout -- <em>name.file</em></span></li>
                <li>Вернуть файл из буфера, т.е. не включать файл в коммит <span class="code"> git reset HEAD <em>name.fail</em></span></li>
                <li>Добавить изменения к пердыдущему коммиту:
                    <ol>
                        <li> узнать HEAD и комментарий последнего коммита <span class="code">git log</span></li>
                        <li> добавить необходимый файл в буфер <span class="code">git add</span></li>
                        <li> добавить необходимый файл в коммит <span class="code">git commit --amed -m "Сообщение предыдущего коммита"</span></li>
                    </ol>
                </li>
                <li>Изменить сообщение коммита <span class="code">git commit --amed -m "изменённое сообщение"</span></li>
                <li>Вернуть файл в буфер из коммита <span class="code">git checkout <первые 10 симфолов ssh> -- <em>name.file</em></span></li>
                <li>Вернуться к предыдущему коммиту <span class="code">git revert <первые 10 симфолов ssh></span> иземенить сообщение комита и нажать enter</li>
                <li>git reset
                    <ul>
                        <li><span class="code">-- soft</span> переместить указатель HEAD</li>
                        <li><span class="code">--mixed</span> возвращает указатель на конкретный коммит и меняет буфер соответствующий репозиторию, но не меняет рабочую дирректорию</li>
                        <li><span class="code">--hard</span> возвращат всё к необходимому коммиту А и стирает все данные сделанные после коммита А</li>
                    </ul>
                </li>
            </ul>
            <h2> Игнорирование файлов</h2>
            <ul> 
                <li>Необходимо создать файл в корне проекта <span class="code">touch <em>.gitignore</em></span></li>
                <li>Далее необходимо в данный файл внести игнорируемые файлы используя названия файла или регулярные выражения</li>
                <li> Если файлы были когда-то отслеживаемым, то их необходимо сначало удалить из репозитория <span class="code">git rm --cached <em>filename</em></span></li>
                <li>После чего необходимо всё закомитить</li>
            </ul>
            <h2>Бранчинг</h2>
            <ul>
                <li>Показать список веток <span class="code">git branch</span></li>
                <li>Создать новую ветку (бранч) c именем new_feature <span class="code"> git branch new_feature</span></li>
                <li>Перейти на ветку new_feature <span class="code">git checkout new_feature</span></li>
                <li>Создать новую ветку и сразу же переключиться/перейти на неё <span class="code">git chekout -b shorten_title</span></li>
                <li>сравнить изменения в верхушках этих двух веток <span class="code"> git diff master..new_feature</span></li>
                <li>показывает изменения в файле на одной строке <span class="code"> git diff --color-words new_feature..shorten_title</span></li>
                <li>покажет все бранчи, которые полностью включены в данный бранч <span class="code">git branch --merged</span></li>
                <li>переименовать бранч <span class="code">git branch -m new_feature seo_title</span></li>
                <li>удалить бранч с именем branch_to_delete <span class="code">git branch -d branch_to_delete</span></li>
                <li>удалить ветку branch_to_delete принудительно, игнорируя предупреждение о неслитых изменениях <span class="code">git branch -D branch_to_delete</span></li>
                <li>не производить быстрое слияние, а создать новый коммит слияния <span class="code">git merge --no-ff branch</span></li>
                <li>произвести слияние, если оно будет быстрым<span class="code">git merge --ff-only branc</span></li>
                <li>оборвать\отменить процесс слияния<span class="code">git merge --abort</span></li>
            </ul>
            <h2>Удалённые репозитории</h2>
            <ul>
                <li>отправить изменения на отдаленный репозиторий в ветку master<span class="code">push</span></li>
                <li>показывает подключенные к этому проекту отдаленные репозитории<span class="code">git remote</span></li>
                <li>создать ветку с именем origin и подключить к ней отдаленный репозиторий по адресу, с которым будет синхронизироваться<span class="code">git remote add origin https://github.com/user/repositoryname.git </span></li>
                <li>показать информацию об отдаленном репозитории<span class="code">git remote -v</span></li>
                <li>отправить на отдаленный репозиторий коммиты из локального репозитория<span class="code">git push -u origin master </span></li>
                <li>показать отдаленные ветки <span class="code">git branch -r</span></li>
                <li>показать все ветки, в том числе и отдаленные<span class="code">git branch -a</span></li>
                <li>клонировать проект из отдаленного репозитория к себе. Вместо имени по умолчанию (название репозитория) можно указать другое название папки "foldername", в которую он будет склонирован <span class="code">git clone https://github.com/user/reponame.git <em>foldername</em></span></li>
                <li>установить опцию "отслеживания\tracking" для ранее не отслеживаемой ветки non_tracking<span class="code">git branch - -set-upstream non_tracking origin/non_tracking</span></li>
                <li>отправить изменения в отдаленную ветку origin <span class="code">git push origin master</span></li>
                <li>получить изменения из отдаленного репозитория в ветку origin/master, синхронизироваться с ним, т.к. у нас только один отдаленный репозиторий, то название можно опустить и использовать сокращенную команду<span class="code">git fetch origin</span></li>
                <li>слить изменения из origin/master в нашу текущую ветку<span class="code">git merge origin/master</span></li>
                <li>находит последний коммит, скачивает его и делает слияние в текущий бранч за один шаг<span class="code">git pull = git fetch + git merge</span></li>
            </ul>          
</div>
<div id="english">
    <h1>Немного Английского</h1>
    <p>Во время изучения программирование часто сталкиваешься с проблемой незнания английского языка, у меня с ним всегда были определённые проблемы. Но я поставила для себя поставила цель выучить его. Зашла в интернет, на эту тему там очень много информации, нашла один потрясающий бесплатный ресурс, разработчикам большое спасибо. Вот кстати ссылочка <a href="http://lingust.ru/english/english-lessons/lesson1" title="Самоучитель Английского языка">Изучаем английский язык с нуля!</a>. Ещё на этом же ресурсе есть ссылка на <a href="https://inspeak.ru/account/main.php" title="Интурактивный курс по изучению английского языка">интерактивные уроки</a>, где всё нагляно описано и можно потринироваться и побеседовать с компьютером, правда это удовольстве уже платное, но по мне оно того стоит. Подписка на данный ресурс мне обошлась 990р за 1 год, не такие великие деньги за уроки по английскому. На данном ресурсе разработчики также хорошо поработали и подобрали материал, там опубликован сборник видео со сводом правил, достаточно удобная вещь.
    </p>
    <p>И так с вашего позволения хочу немного повествовать об английском языке. Я поняла следующее чтобы его выучить следует постоянно этим заниматься, и необходимо научиться думать на английском. У меня с этим начались первые проблемы. Первое с чего необходимо начать это.
    </p>
</div>
<div id="myself">   
    <h1>Немного о себе</h1>
        <p> А сейчас с вашего позволения я бы хотела, немного поделится своими мыслями, связанными с моей жизнью. Скажу честно меня часто посещают настораживающие вопросы: <em>«А не много ли мест работы у меня было на начале карьерного пути?»</em>.  Ведь всё что указано в резюме, это только те места, о которых мне хочется рассказывать. Я могу долго повествовать о том, как мне повезло там оказаться и какой опыт я получила. Не каждому студенту в маленьком промышленном городе выпадает шанс устроится на достойное рабочее место, где работа нравится, доставляет удовольствие и связана с его специальностью. Но на самом деле иногда приходилось работать вечерами уборщицей в школе, был период когда я продавала билеты в киноцентре и ещё достаточно подобных мест работы. Мне этим не всегда хочется делится, ведь это совсем далеко от моих увлечений и профессиональной деятельности. Я всегда думала что я достойна чего-то большего, и могу проявить себя не только в общении с людьми, но и не отрицаю что мне работать с людьми нравится. И возвращаясь к тревожащему меня вопросу о своём постоянстве, я всегда прихожу к выводу, что всё что сделано, это сделано не зря. Я не жалею ни об одном своём решении. Это мой опыт, мои знания и умения выживать.
        </p>
        <p>
                К сожалению,  я не могу похвастаться большими знаниями в области программирования, да в целом в ИТ-индустрии, но некоторые основы я знаю, данное резюме полностью выполнено мной, без использования конструкторов и фреймворков. Столько лет уходит на получение диплома, уточню именно на получение диплома, а не на обучение. Система построена странным и непонятным образом, нас пытаются научить всему понемногу и в итоге если студент идет по точно заданной, преподавателями, траектории, он не знает ровным счётом ничего. Это издержки системы образования, нет я ни в коем случае не хочу переложить свои промахи на политику, но если честно, преподавателей сейчас заботят не только знания студентов, у них есть и множество других проблем, я с этим познакомилась на своём первом рабочем месте в сфере ИТ, хотя это несколько другая история. В моей жизни всё сложилось так, что когда необходимо было учиться, я работала. Да свои дипломы я успешно получила, правда сейчас не очень понимаю зачем они мне, думаю это дело времени, еще узнаю.
            </p>
           
           <p>
               Когда мы молоды, мы хотим от жизни очень много, энергия переполняет тело  и мысли, масса идей в голове, каждую хочется воплотить. Мы оступаемся и в итоге получается как в той поговорке <q>За двумя зайцами погонишься, ни одного не поймаешь!</q> да, насколько правы наши предки. И всё же о чём я? Оказалось очень сложно выбрать направление, в котором хочется развиваться и двигаться дальше. Это новые знания и это не может быть не интересно, когда написан код и виден результат работы появляется чувство волшбства и в тоже время, понимание что это только начало и сколькому еще можно научится. В некоторые моменты встаёт вопрос, <em>«А в том ли направлении я двигаюсь? Что нужно работодателю?»</em>. Эти вопросы по большей части риторические, по моему опыту поиска работы работодатели не совсем понимают что хотят. Я ни хочу никого обидеть, но в нашем городе я сталкнулась с ситуацией, когда после собеседования оглашают о готовности принять на работу, приглашают на первый рабочий день, причём специалиста из совершенно другой области, и когда наступает день Х ты приходишь на своё будующее рабочее место, а там тебя встречает закрытая дверь, а твой начальник не отвечеает на телефонные звонки. Для меня данная ситуация была очень странной и непонятной. Мир полон неординарных людей и обстоятельств.
            </p>
</div>